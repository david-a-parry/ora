#!/usr/bin/env python3
import sys
import argparse
from ora import __version__ as ora_version

modes = ['gene', 'vcf']


def add_gene_argparser(subparsers):
    parser = subparsers.add_parser(
        'gene',
        description='''Search for protein features in orthologs''',
        help='''Search for othologous residue annotations for given gene and
        position(s)''',
        add_help=False)
    parser.set_defaults(func=gene_lookup)
    parser.add_argument("-g", "--gene", required=True,
                        help='''Gene/protein ID to search with. Accession types
                        will be inferred from input and the corresponding
                        Ensembl gene ID will be identified.''')
    parser.add_argument("-p", "--pos", required=True, type=int, nargs='+',
                        help='''Position(s) in protein to search. This must be
                        relative to the canonical Ensembl transcript as used by
                        Ensembl's Compara database.''')
    parser.add_argument("-d", "--db",
                        help='''Local sqlite3 database to use for look-ups.
                        If not provided lookups will be performed via Ensembl
                        REST lookups.''')
    parser.add_argument("--paralog_lookups", action='store_true',
                        help='''Also perform homology lookups on paralogs
                        identified.''')
    parser.add_argument("-a", "--alignments", help='''Output alignments with
                        hits to this file.''')
    parser.add_argument("--all_homologs", action='store_true',
                        help='''Output alignment information for all homologs
                        even if no features are found.''')
    parser.add_argument("--line_length", type=int, default=60,
                        help='''Length of sequence lines in alignment output.
                        Default=60.''')
    parser.add_argument("--timeout", type=int, default=10,
                        help='''Lookup timeout (in seconds) for Ensembl REST
                        queries. Default=10''')
    parser.add_argument("--max_retries", type=int, default=2,
                        help='''Maximum retry attempts for Ensembl REST
                        queries. Default=2''')
    parser.add_argument("--debug", action='store_true',
                        help='Add debugging messages to output.')
    parser.add_argument("--quiet", action='store_true',
                        help='Only output warning logger messages.')
    parser.add_argument("--silent", action='store_true',
                        help='Only output error logger messages.')
    parser.add_argument("--help", action='help',
                        help='Print this help message and exit.')
    return parser


def add_vcf_argparser(subparsers):
    parser = subparsers.add_parser(
        'vcf',
        description='''Annotate variants with orthologous protein features''',
        help='''Search for othologous residue annotations for all missense and
        in-frame indels in a VCF.''',
        add_help=False)
    from ora.vcf_annotator import annotate_variants
    parser.set_defaults(func=annotate_variants)
    parser.add_argument("-i", "--input", required=True, metavar='VCF',
                        help='''VCF/BCF input to annotate. Must be annotated
                        by Ensembl VEP using Ensembl Gene IDs.''')
    parser.add_argument("-d", "--db", required=True,
                        help='''Local sqlite3 database to use for look-ups.
                        Required.''')
    parser.add_argument("-o", "--output", metavar='FILE',
                        help='''Output file. If the filename ends with '.gz'
                        the output will be compressed with gzip. If not
                        provided will default to STDOUT.''')
    parser.add_argument("--paralog_lookups", action='store_true',
                        help='''Also perform ortholog lookups on paralogs
                        identified. Likely to significantly increase runtime
                        but may uncover overlapping features from orthologs of
                        paralogs identified.''')
    parser.add_argument("-a", "--alignments", metavar='FILE',
                        help='''Output alignments of hits to this file. If the
                        filename ends with '.gz' the output will be compressed
                        with gzip.''')
    parser.add_argument("--line_length", type=int, default=60, metavar='N',
                        help='''Length of sequence lines in alignment output.
                        Default=60.''')
    parser.add_argument("--snpeff_mode", action='store_true',
                        help='''Force SnpEff mode. Applicable if your input has
                        both SnpEff and VEP annotations. Default behaviour is
                        to autodetect VEP and SnpEff annotations with VEP
                        annotations used by default if available and SnpEff
                        annotations used if VEP annotations are not
                        present.''')
    parser.add_argument("--progress", type=int, metavar='N', default=10_000,
                        help='''Report progress every N variants. Default is
                        10_000. Set to 0 to turn off progress reporting.''')
    parser.add_argument("--debug", action='store_true',
                        help='Add debugging messages to output.')
    parser.add_argument("--quiet", action='store_true',
                        help='Only output warning logger messages.')
    parser.add_argument("--silent", action='store_true',
                        help='Only output error logger messages.')
    parser.add_argument("--help", action='help',
                        help='Print this help message and exit.')
    return parser


def gene_lookup(args):
    if args.db is None:
        from ora.remote import remote_lookups
        remote_lookups(gene=args.gene, pos=args.pos,
                       paralog_lookups=args.paralog_lookups,
                       line_length=args.line_length, timeout=args.timeout,
                       max_retries=args.max_retries,
                       all_homologs=args.all_homologs,
                       output_alignments=args.alignments,
                       quiet=args.quiet, debug=args.debug, silent=args.silent)
    else:
        from ora.local import local_lookups
        local_lookups(gene=args.gene, pos=args.pos, db=args.db,
                      paralog_lookups=args.paralog_lookups,
                      line_length=args.line_length,
                      all_homologs=args.all_homologs,
                      output_alignments=args.alignments,
                      quiet=args.quiet, debug=args.debug, silent=args.silent)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Ortholog/paralog residue annotator',
        epilog='''Run `%(prog)s <command> --help` for options/help for a
        specific command.''')
    parser.add_argument("--version", action='version', version=ora_version,
                        help='Print version and exit.')
    subparsers = parser.add_subparsers(
        title='available commands',
        metavar='<{}>'.format('|'.join(modes))
    )
    gene = add_gene_argparser(subparsers)
    vcf = add_vcf_argparser(subparsers)
    args = parser.parse_args()
    if len(vars(args)) == 0:
        sys.exit(parser.format_help())
    args.func(args)
